#pragma once

#include <iostream>
#include <set>
#include <sc2api/sc2_typeenums.h>
#include <sc2api/sc2_unit.h>


namespace Aeolus {
	namespace constants
	{
		enum class ManagerName
		{
			UNIT_ROLE_MANAGER,
			RESOURCE_MANAGER,
			PATH_MANAGER,
			NEUTRAL_UNIT_MANAGER,
			UNIT_FILTER_MANAGER,
			UNIT_PROPERTY_MANAGER,
			DEFENSE_MANAGER,
			PLACEMENT_MANAGER,
			BUILDING_MANAGER,
		};

		enum class ManagerRequestType
		{
			GET_UNITS_FROM_ROLE,
			CATCH_UNIT,
			ASSIGN_ROLE,
			ASSIGN_WORKER_TO_PATCH,
			CLEAR_ASSIGNMENT,

			//RESOURCEMANAGER
			CALCULATE_MINERAL_GATHERING_POINTS,
			GET_MINERAL_GATHERING_POINTS,
			GET_WORKERS_TO_PATCH,
			GET_WORKERS_TO_GEYSER,
			ASSIGN_INITIAL_WORKERS,
			SELECT_WORKER_TO_TARGET,

			// PathManager
			GET_DEFAULT_GRID_DATA,
			GET_ASTAR_GRID_DATA,
			FIND_CLOSEST_GROUND_SAFE_SPOT,
			IS_GROUND_POSITION_SAFE,
			GET_FLOOD_FILL_AREA,
			GET_NEXT_PATH_POINT,

			// UnitFilterManager
			GET_ALL_MINERAL_PATCHES,
			GET_ALL_VESPENE_GEYSERS,
			GET_ALL_RESOURCES,
			GET_ALL_DESTRUCTABLES,
			GET_ALL_STRUCTURES,
			GET_ALL_OWN_UNITS,
			GET_OWN_WORKERS,
			GET_OWN_TOWN_HALLS,
			GET_OWN_GAS_BUILDINGS,
			GET_OWN_STRUCTURES,
			GET_ALL_ENEMY_UNITS,
			GET_ALL_ENEMY_STRUCTURES,

			// UnitPropertyManager
			CAN_ATTACK_GROUND,
			CAN_ATTACK_AIR,
			GROUND_RANGE,
			AIR_RANGE,
			GROUND_DPS,
			AIR_DPS,
			UNITS_IN_ATTACK_RANGE,
			GET_CREATION_ABILITY,
			GET_UNIT_COST,
			GET_REQUIRED_TECH,
			GET_UNIT_SUPPLY_COST,
			GET_UNIT_MOVEMENT_SPEED,

			// DefenseManager
			GET_UNITS_IN_RANGE,
			GET_OWN_UNITS_IN_RANGE,
			GET_GROUND_THREATS_NEAR_BASES,
			GET_ENEMY_UNITS_IN_RANGE_MAP,

			// PlacementManager
			GET_EXPANSION_LOCATIONS,
			REQUEST_BUILDING_PLACEMENT,

			// BuildingManager
			BUILD_WITH_SPECIFIC_WORKER,
			GET_NUMBER_PENDING,
		};

		enum class UnitRole
		{
			GATHERING,
			BUILDING,
			ATTACKING
		};
		std::string ManagerNameToString(ManagerName name);
		std::string ManagerRequestTypeToString(ManagerRequestType requestType);
	
		const double MINING_RADIUS{ 1.35 };
		const double TOWNHALL_DISTANCE_FACTOR{ 1.08 };
		const double MINING_BOOST_MIN_RADIUS{ 0.5625 };
		const double MINING_BOOST_MAX_RADIUS{ 4.0 };
		const double TOWNHALL_RADIUS{ 2.75 };

		const float CAMERA_WIDTH{ 24.0f };
		const int FEATURE_LAYER_SIZE{ 120 };
		const int PIXEL_DRAW_SIZE{ 4 };
		constexpr int DRAW_SIZE = FEATURE_LAYER_SIZE * PIXEL_DRAW_SIZE;

		const std::set<::sc2::UnitTypeID> MINERAL_IDS =
		{
			::sc2::UNIT_TYPEID::NEUTRAL_RICHMINERALFIELD,
			::sc2::UNIT_TYPEID::NEUTRAL_RICHMINERALFIELD750,
			::sc2::UNIT_TYPEID::NEUTRAL_MINERALFIELD,
			::sc2::UNIT_TYPEID::NEUTRAL_MINERALFIELD450,
			::sc2::UNIT_TYPEID::NEUTRAL_MINERALFIELD750,
			::sc2::UNIT_TYPEID::NEUTRAL_LABMINERALFIELD,
			::sc2::UNIT_TYPEID::NEUTRAL_LABMINERALFIELD750,
			::sc2::UNIT_TYPEID::NEUTRAL_PURIFIERMINERALFIELD,
			::sc2::UNIT_TYPEID::NEUTRAL_PURIFIERMINERALFIELD750,
			::sc2::UNIT_TYPEID::NEUTRAL_PURIFIERRICHMINERALFIELD,
			::sc2::UNIT_TYPEID::NEUTRAL_PURIFIERRICHMINERALFIELD750,
			::sc2::UNIT_TYPEID::NEUTRAL_BATTLESTATIONMINERALFIELD,
			::sc2::UNIT_TYPEID::NEUTRAL_BATTLESTATIONMINERALFIELD750,
			::sc2::UNIT_TYPEID::MINERALFIELDOPAQUE,
			::sc2::UNIT_TYPEID::MINERALFIELDOPAQUE900
		};

		const std::set<::sc2::UnitTypeID> VESPENE_IDS =
		{
			::sc2::UNIT_TYPEID::NEUTRAL_VESPENEGEYSER,
			::sc2::UNIT_TYPEID::NEUTRAL_SPACEPLATFORMGEYSER,
			::sc2::UNIT_TYPEID::NEUTRAL_RICHVESPENEGEYSER,
			::sc2::UNIT_TYPEID::NEUTRAL_PROTOSSVESPENEGEYSER,
			::sc2::UNIT_TYPEID::NEUTRAL_PURIFIERVESPENEGEYSER,
			::sc2::UNIT_TYPEID::NEUTRAL_SHAKURASVESPENEGEYSER
		};

		const std::set<::sc2::UnitTypeID> WATCHTOWER_IDS =
		{
			::sc2::UNIT_TYPEID::NEUTRAL_XELNAGATOWER
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLE2X2_IDS =
		{
			::sc2::UNIT_TYPEID::ROCKS2X2NONCONJOINED,
			::sc2::UNIT_TYPEID::DEBRIS2X2NONCONJOINED
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLE4X4_IDS =
		{
			::sc2::UNIT_TYPEID::DESTRUCTIBLECITYDEBRIS4X4,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEDEBRIS4X4,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEICE4X4,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCK4X4,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCKEX14X4
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLE4X2_IDS =
		{
			::sc2::UNIT_TYPEID::DESTRUCTIBLECITYDEBRIS2X4HORIZONTAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEICE2X4HORIZONTAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCK2X4HORIZONTAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCKEX12X4HORIZONTAL
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLE2X4_IDS =
		{
			::sc2::UNIT_TYPEID::DESTRUCTIBLECITYDEBRIS2X4VERTICAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEICE2X4VERTICAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCK2X4VERTICAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCKEX12X4VERTICAL
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLE6X2_IDS =
		{
			::sc2::UNIT_TYPEID::DESTRUCTIBLECITYDEBRIS2X6HORIZONTAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEICE2X6HORIZONTAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCK2X6HORIZONTAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCKEX12X6HORIZONTAL
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLE2X6_IDS =
		{
			::sc2::UNIT_TYPEID::DESTRUCTIBLECITYDEBRIS2X6VERTICAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEICE2X6VERTICAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCK2X6VERTICAL,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCKEX12X6VERTICAL
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLE4X12_IDS =
		{
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCKEX1VERTICALHUGE,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEICEVERTICALHUGE
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLE12X4_IDS =
		{
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCKEX1HORIZONTALHUGE,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEICEHORIZONTALHUGE
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLE6X6_IDS =
		{
			::sc2::UNIT_TYPEID::NEUTRAL_DESTRUCTIBLECITYDEBRIS6X6,
			::sc2::UNIT_TYPEID::NEUTRAL_DESTRUCTIBLEDEBRIS6X6,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEICE6X6,
			::sc2::UNIT_TYPEID::NEUTRAL_DESTRUCTIBLEROCK6X6,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCKEX16X6
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLEBLUR_IDS =
		{
			::sc2::UNIT_TYPEID::DESTRUCTIBLECITYDEBRISHUGEDIAGONALBLUR,
			::sc2::UNIT_TYPEID::NEUTRAL_DESTRUCTIBLEDEBRISRAMPDIAGONALHUGEBLUR,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEICEDIAGONALHUGEBLUR,
			::sc2::UNIT_TYPEID::NEUTRAL_DESTRUCTIBLEROCKEX1DIAGONALHUGEBLUR,
			::sc2::UNIT_TYPEID::DESTRUCTIBLERAMPDIAGONALHUGEBLUR
		};

		const std::set<::sc2::UnitTypeID> DESTRUCTABLEULBR_IDS =
		{
			::sc2::UNIT_TYPEID::DESTRUCTIBLECITYDEBRISHUGEDIAGONALULBR,
			::sc2::UNIT_TYPEID::NEUTRAL_DESTRUCTIBLEDEBRISRAMPDIAGONALHUGEULBR,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEICEDIAGONALHUGEULBR,
			::sc2::UNIT_TYPEID::DESTRUCTIBLEROCKEX1DIAGONALHUGEULBR,
			::sc2::UNIT_TYPEID::DESTRUCTIBLERAMPDIAGONALHUGEULBR
		};

		const std::set<::sc2::UnitTypeID> BUILDINGS_2X2 =
		{
			::sc2::UNIT_TYPEID::TERRAN_SUPPLYDEPOT,
			::sc2::UNIT_TYPEID::PROTOSS_PYLON,
			::sc2::UNIT_TYPEID::PROTOSS_DARKSHRINE,
			::sc2::UNIT_TYPEID::PROTOSS_PHOTONCANNON,
			::sc2::UNIT_TYPEID::TERRAN_TECHLAB,
			::sc2::UNIT_TYPEID::TERRAN_STARPORTTECHLAB,
			::sc2::UNIT_TYPEID::TERRAN_FACTORYTECHLAB,
			::sc2::UNIT_TYPEID::TERRAN_BARRACKSTECHLAB,
			::sc2::UNIT_TYPEID::TERRAN_REACTOR,
			::sc2::UNIT_TYPEID::TERRAN_STARPORTREACTOR,
			::sc2::UNIT_TYPEID::TERRAN_FACTORYREACTOR,
			::sc2::UNIT_TYPEID::TERRAN_BARRACKSREACTOR,
			::sc2::UNIT_TYPEID::TERRAN_MISSILETURRET,
			::sc2::UNIT_TYPEID::ZERG_SPORECRAWLER,
			::sc2::UNIT_TYPEID::ZERG_SPINECRAWLER,
			::sc2::UNIT_TYPEID::ZERG_SPIRE,
			::sc2::UNIT_TYPEID::ZERG_GREATERSPIRE
		};

		const std::set<::sc2::UnitTypeID> BUILDINGS_3X3 =
		{
			::sc2::UNIT_TYPEID::PROTOSS_GATEWAY,
			::sc2::UNIT_TYPEID::PROTOSS_WARPGATE,
			::sc2::UNIT_TYPEID::PROTOSS_CYBERNETICSCORE,
			::sc2::UNIT_TYPEID::PROTOSS_FORGE,
			::sc2::UNIT_TYPEID::PROTOSS_ROBOTICSFACILITY,
			::sc2::UNIT_TYPEID::PROTOSS_ROBOTICSBAY,
			::sc2::UNIT_TYPEID::PROTOSS_TEMPLARARCHIVE,
			::sc2::UNIT_TYPEID::PROTOSS_TWILIGHTCOUNCIL,
			::sc2::UNIT_TYPEID::PROTOSS_STARGATE,
			::sc2::UNIT_TYPEID::PROTOSS_FLEETBEACON,
			::sc2::UNIT_TYPEID::PROTOSS_ASSIMILATOR,
			::sc2::UNIT_TYPEID::PROTOSS_ASSIMILATORRICH,
			::sc2::UNIT_TYPEID::ZERG_SPAWNINGPOOL,
			::sc2::UNIT_TYPEID::ZERG_ROACHWARREN,
			::sc2::UNIT_TYPEID::ZERG_HYDRALISKDEN,
			::sc2::UNIT_TYPEID::ZERG_BANELINGNEST,
			::sc2::UNIT_TYPEID::ZERG_EVOLUTIONCHAMBER,
			::sc2::UNIT_TYPEID::ZERG_NYDUSNETWORK,
			::sc2::UNIT_TYPEID::ZERG_NYDUSCANAL,
			::sc2::UNIT_TYPEID::ZERG_EXTRACTOR,
			::sc2::UNIT_TYPEID::ZERG_EXTRACTORRICH,
			::sc2::UNIT_TYPEID::ZERG_INFESTATIONPIT,
			::sc2::UNIT_TYPEID::ZERG_ULTRALISKCAVERN,
			::sc2::UNIT_TYPEID::TERRAN_BARRACKS,
			::sc2::UNIT_TYPEID::TERRAN_FACTORY,
			::sc2::UNIT_TYPEID::TERRAN_STARPORT,
			::sc2::UNIT_TYPEID::TERRAN_ENGINEERINGBAY,
			::sc2::UNIT_TYPEID::TERRAN_GHOSTACADEMY,
			::sc2::UNIT_TYPEID::TERRAN_FUSIONCORE,
			::sc2::UNIT_TYPEID::TERRAN_BUNKER,
			::sc2::UNIT_TYPEID::TERRAN_ARMORY,
			::sc2::UNIT_TYPEID::TERRAN_REFINERY,
			::sc2::UNIT_TYPEID::TERRAN_REFINERYRICH
		};

		const std::set<::sc2::UnitTypeID> BUILDING_5X5
		{
			::sc2::UNIT_TYPEID::PROTOSS_NEXUS,
			::sc2::UNIT_TYPEID::ZERG_HATCHERY,
			::sc2::UNIT_TYPEID::ZERG_HIVE,
			::sc2::UNIT_TYPEID::ZERG_LAIR,
			::sc2::UNIT_TYPEID::TERRAN_COMMANDCENTER,
			::sc2::UNIT_TYPEID::TERRAN_ORBITALCOMMAND,
			::sc2::UNIT_TYPEID::TERRAN_PLANETARYFORTRESS
		};

		const std::set<::sc2::UnitTypeID> WORKER_TYPES
		{
			::sc2::UNIT_TYPEID::TERRAN_SCV,
			::sc2::UNIT_TYPEID::PROTOSS_PROBE,
			::sc2::UNIT_TYPEID::ZERG_DRONE
		};

		const std::set<::sc2::UnitTypeID> GAS_BUILDINGS
		{
			::sc2::UNIT_TYPEID::PROTOSS_ASSIMILATOR,
			::sc2::UNIT_TYPEID::PROTOSS_ASSIMILATORRICH,
			::sc2::UNIT_TYPEID::TERRAN_REFINERY,
			::sc2::UNIT_TYPEID::TERRAN_REFINERYRICH,
			::sc2::UNIT_TYPEID::ZERG_EXTRACTOR,
			::sc2::UNIT_TYPEID::ZERG_EXTRACTORRICH
		};

		const std::set<::sc2::UnitTypeID> GATEWAY_UNITS
		{
			::sc2::UNIT_TYPEID::PROTOSS_ZEALOT,
			::sc2::UNIT_TYPEID::PROTOSS_STALKER,
			::sc2::UNIT_TYPEID::PROTOSS_ADEPT,
			::sc2::UNIT_TYPEID::PROTOSS_SENTRY,
			::sc2::UNIT_TYPEID::PROTOSS_HIGHTEMPLAR,
			::sc2::UNIT_TYPEID::PROTOSS_DARKTEMPLAR
		};

		const std::set<::sc2::UnitTypeID> ROBO_UNITS
		{
			::sc2::UNIT_TYPEID::PROTOSS_OBSERVER,
			::sc2::UNIT_TYPEID::PROTOSS_IMMORTAL,
			::sc2::UNIT_TYPEID::PROTOSS_WARPPRISM,
			::sc2::UNIT_TYPEID::PROTOSS_COLOSSUS,
			::sc2::UNIT_TYPEID::PROTOSS_DISRUPTOR
		};

		const std::set<::sc2::UnitTypeID> STARGATE_UNITS
		{
			::sc2::UNIT_TYPEID::PROTOSS_ORACLE,
			::sc2::UNIT_TYPEID::PROTOSS_PHOENIX,
			::sc2::UNIT_TYPEID::PROTOSS_VOIDRAY,
			::sc2::UNIT_TYPEID::PROTOSS_TEMPEST,
			::sc2::UNIT_TYPEID::PROTOSS_CARRIER
		};

		const std::set<::sc2::UnitTypeID> IGNORED_UNITS
		{
			::sc2::UNIT_TYPEID::ZERG_EGG,
			::sc2::UNIT_TYPEID::ZERG_LARVA,
			::sc2::UNIT_TYPEID::ZERG_CREEPTUMORBURROWED,
			::sc2::UNIT_TYPEID::ZERG_CREEPTUMOR,
			::sc2::UNIT_TYPEID::ZERG_CREEPTUMORQUEEN,
			::sc2::UNIT_TYPEID::TERRAN_MULE
		};

		const std::set<::sc2::UnitTypeID> ALL_STRUCTURES
		{
			::sc2::UNIT_TYPEID::TERRAN_ARMORY,
			::sc2::UNIT_TYPEID::PROTOSS_ASSIMILATOR,
			::sc2::UNIT_TYPEID::PROTOSS_ASSIMILATORRICH,
			::sc2::UNIT_TYPEID::TERRAN_AUTOTURRET,
			::sc2::UNIT_TYPEID::ZERG_BANELINGNEST,
			::sc2::UNIT_TYPEID::TERRAN_BARRACKS,
			::sc2::UNIT_TYPEID::TERRAN_BARRACKSFLYING,
			::sc2::UNIT_TYPEID::TERRAN_BARRACKSREACTOR,
			::sc2::UNIT_TYPEID::TERRAN_BARRACKSTECHLAB,
			::sc2::UNIT_TYPEID::TERRAN_BUNKER,
			::sc2::UNIT_TYPEID::TERRAN_COMMANDCENTER,
			::sc2::UNIT_TYPEID::TERRAN_COMMANDCENTERFLYING,
			::sc2::UNIT_TYPEID::ZERG_CREEPTUMOR,
			::sc2::UNIT_TYPEID::ZERG_CREEPTUMORBURROWED,
			::sc2::UNIT_TYPEID::ZERG_CREEPTUMORQUEEN,
			::sc2::UNIT_TYPEID::PROTOSS_CYBERNETICSCORE,
			::sc2::UNIT_TYPEID::PROTOSS_DARKSHRINE,
			::sc2::UNIT_TYPEID::TERRAN_ENGINEERINGBAY,
			::sc2::UNIT_TYPEID::ZERG_EVOLUTIONCHAMBER,
			::sc2::UNIT_TYPEID::ZERG_EXTRACTOR,
			::sc2::UNIT_TYPEID::ZERG_EXTRACTORRICH,
			::sc2::UNIT_TYPEID::TERRAN_FACTORY,
			::sc2::UNIT_TYPEID::TERRAN_FACTORYFLYING,
			::sc2::UNIT_TYPEID::TERRAN_FACTORYREACTOR,
			::sc2::UNIT_TYPEID::TERRAN_FACTORYTECHLAB,
			::sc2::UNIT_TYPEID::PROTOSS_FLEETBEACON,
			::sc2::UNIT_TYPEID::PROTOSS_FORGE,
			::sc2::UNIT_TYPEID::TERRAN_FUSIONCORE,
			::sc2::UNIT_TYPEID::PROTOSS_GATEWAY,
			::sc2::UNIT_TYPEID::TERRAN_GHOSTACADEMY,
			::sc2::UNIT_TYPEID::ZERG_GREATERSPIRE,
			::sc2::UNIT_TYPEID::ZERG_HATCHERY,
			::sc2::UNIT_TYPEID::ZERG_HIVE,
			::sc2::UNIT_TYPEID::ZERG_HYDRALISKDEN,
			::sc2::UNIT_TYPEID::ZERG_INFESTATIONPIT,
			::sc2::UNIT_TYPEID::ZERG_LAIR,
			::sc2::UNIT_TYPEID::ZERG_LURKERDENMP,
			::sc2::UNIT_TYPEID::TERRAN_MISSILETURRET,
			::sc2::UNIT_TYPEID::PROTOSS_NEXUS,
			::sc2::UNIT_TYPEID::ZERG_NYDUSCANAL,
			::sc2::UNIT_TYPEID::ZERG_NYDUSNETWORK,
			::sc2::UNIT_TYPEID::PROTOSS_ORACLESTASISTRAP,
			::sc2::UNIT_TYPEID::TERRAN_ORBITALCOMMAND,
			::sc2::UNIT_TYPEID::TERRAN_ORBITALCOMMANDFLYING,
			::sc2::UNIT_TYPEID::PROTOSS_PHOTONCANNON,
			::sc2::UNIT_TYPEID::TERRAN_PLANETARYFORTRESS,
			::sc2::UNIT_TYPEID::TERRAN_POINTDEFENSEDRONE,
			::sc2::UNIT_TYPEID::PROTOSS_PYLON,
			::sc2::UNIT_TYPEID::PROTOSS_PYLONOVERCHARGED,
			::sc2::UNIT_TYPEID::TERRAN_REACTOR,
			::sc2::UNIT_TYPEID::TERRAN_REFINERY,
			::sc2::UNIT_TYPEID::TERRAN_REFINERYRICH,
			::sc2::UNIT_TYPEID::ZERG_ROACHWARREN,
			::sc2::UNIT_TYPEID::PROTOSS_ROBOTICSBAY,
			::sc2::UNIT_TYPEID::PROTOSS_ROBOTICSFACILITY,
			::sc2::UNIT_TYPEID::TERRAN_SENSORTOWER,
			::sc2::UNIT_TYPEID::PROTOSS_SHIELDBATTERY,
			::sc2::UNIT_TYPEID::ZERG_SPAWNINGPOOL,
			::sc2::UNIT_TYPEID::ZERG_SPINECRAWLER,
			::sc2::UNIT_TYPEID::ZERG_SPINECRAWLERUPROOTED,
			::sc2::UNIT_TYPEID::ZERG_SPIRE,
			::sc2::UNIT_TYPEID::ZERG_SPORECRAWLER,
			::sc2::UNIT_TYPEID::ZERG_SPORECRAWLERUPROOTED,
			::sc2::UNIT_TYPEID::PROTOSS_STARGATE,
			::sc2::UNIT_TYPEID::TERRAN_STARPORT,
			::sc2::UNIT_TYPEID::TERRAN_STARPORTFLYING,
			::sc2::UNIT_TYPEID::TERRAN_STARPORTREACTOR,
			::sc2::UNIT_TYPEID::TERRAN_STARPORTTECHLAB,
			::sc2::UNIT_TYPEID::TERRAN_SUPPLYDEPOT,
			::sc2::UNIT_TYPEID::TERRAN_SUPPLYDEPOTLOWERED,
			::sc2::UNIT_TYPEID::TERRAN_TECHLAB,
			::sc2::UNIT_TYPEID::PROTOSS_TEMPLARARCHIVE,
			::sc2::UNIT_TYPEID::PROTOSS_TWILIGHTCOUNCIL,
			::sc2::UNIT_TYPEID::ZERG_ULTRALISKCAVERN,
			::sc2::UNIT_TYPEID::PROTOSS_WARPGATE,
		};

		const std::set<::sc2::UnitTypeID> BUILDINGS = []
		{
			std::set<::sc2::UnitTypeID> BUILDINGS_;
			// Insert all elements from BUILDINGS_2X2
			BUILDINGS_.insert(BUILDINGS_2X2.begin(), BUILDINGS_2X2.end());
			// Insert all elements from BUILDINGS_3X3
			BUILDINGS_.insert(BUILDINGS_3X3.begin(), BUILDINGS_3X3.end());
			// Insert all elements from BUILDING_5X5
			BUILDINGS_.insert(BUILDING_5X5.begin(), BUILDING_5X5.end());
			return BUILDINGS_;
		}();
	}

	namespace Config
	{
		inline double range_buffer = 4.0;
	}
}